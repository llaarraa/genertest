get(input$file1$datapath)
isolate(dataset1()$Topic)
Q
runApp()
Q
runApp()
Q
runApp()
Q
runApp()
Q
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
files.to.move=dir(file.path(path.package("genertest"),"extdata/"), pattern="*.pdf", full.names=TRUE)
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1, tot.points=50,
files.to.move=files.to.move)
#list the pdf files stored in the extdata directory of the package
files.to.move=dir(file.path(path.package("genertest"),"extdata/"), pattern="*.pdf", full.names=TRUE)
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1, tot.points=50,
files.to.move=files.to.move, use.Sweave=TRUE)
TMP
TMP$Questions
runApp()
Q
runApp()
Q
names(TMP)
runApp()
Q
TMP
TMP$files
lapply(TMP$files, paste)
unlist(TMP$files)
paste(unlist(TMP$files))
paste(unlist(TMP$files), sep="")
paste(unlist(TMP$files), sep="\")
Q
paste(cat(TMP$files), sep="\")
)
paste(cat(TMP$files), sep="\n")
paste("Files: ", cat(TMP$files), sep="\n")
paste("Files: ", cat(TMP$files), sep="\n")
paste("Files: ", cat(TMP$files), sep="\n")
paste("Files: ", cat(TMP$files) )
paste(cat("Files: "), cat(TMP$files) )
paste(cat("Files: "), cat(TMP$files) , sep="\n")
runApp()
runApp()
Q
names(TMP)
TMP$files
cat(TMP$files)
paste(cat(TMP$files))
paste(cat(TMP$files), sep="\t")
paste(cat(TMP$files), sep="\n")
runApp()
Q
paste("Questions: ", cat(dat()$Questions),  "Files: ", cat(dat()$files), "Errors: ", cat(dat()$errors),  sep="\n")
Q
Q
paste("Questions: ", cat(TMP$Questions),  "Files: ", cat(TMP$files), "Errors: ", cat(TMP$errors),  sep="\n")
paste("Questions: ", cat(unlist(TMP$Questions),  "Files: ", cat(TMP$files), "Errors: ", cat(TMP$errors),  sep="\n")
)
Q
cat(unlist(TMP$Questions))
cat(TMP$Questions)
Q
paste(TMP$Questions, collapse="\n")
paste(TMP$Questions, collapse=" ")
paste(TMP$files, collapse=" ")
runApp()
Q
lapply(TMP)
lapply(TMP, length)
unlist(lapply(TMP, length))
max(unlist(lapply(TMP, length)))
Q
TMP
? renderUI
runApp()
Q
runApp()
Q
runApp()
Q
runApp()
Q
runApp()
Q
runApp()
runApp()
Q
runApp()
Q
TMP$files
as.matrix(TMP$files)
as.data.frame(as.matrix(TMP$files))
runApp()
Q
as.data.frame(as.matri(TMP$files))
as.data.frame(as.matrix(TMP$files))
xtable(as.data.frame(as.matrix(TMP$files)))
library(xtable)
xtable(as.data.frame(as.matrix(TMP$files)))
foo=as.data.frame(as.matrix(dat()$files))
names(foo)="Files"
foo=as.data.frame(as.matrix(TMP$files))
names(foo)="Files"
foo
xtable(foo)
runApp()
Q
runApp()
Q
TMP
library(genertest)
? genertest
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
TMP
? genertestPreSelect
#data(my.data)
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
gPS.output<-genertestPreSelect(my.file.name, my.outdir=NULL, list.QID=list(c(1,2,3), c(2,3,4)), num.tests=2, repeat.each.test=3,
my.seed=2, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
gPS.output
source('~/.active-rstudio-document')
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
files.to.move=dir(file.path(path.package("genertest"),"extdata/"), pattern="*.pdf", full.names=TRUE)
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1, tot.points=50,
files.to.move=files.to.move)
#list the pdf files stored in the extdata directory of the package
files.to.move=dir(file.path(path.package("genertest"),"extdata/"), pattern="*.pdf", full.names=TRUE)
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1, tot.points=50,
files.to.move=files.to.move, use.Sweave=TRUE)
TMP
Merge.pdf(TMP)
TMP
TMP
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/genertest.R')
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
TMP
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/genertestPreSelect.R')
#data(my.data)
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
gPS.output<-genertestPreSelect(my.file.name, my.outdir=NULL, list.QID=list(c(1,2,3), c(2,3,4)), num.tests=2, repeat.each.test=3,
my.seed=2, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
gPS.output
#merge the files in a single file
merge.out=Merge.pdf(gPS.output)
gPS.output
library(genertest)
runApp()
runApp()
as.data.frame(TMP$files, unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", "))))
as.data.frame(TMP$files)
unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))
as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", "))))
runApp()
foo=as.data.frame(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo
foo=as.data.frame(as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo
foo=data.frame.cbind(as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo=cbind.data.frame(as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo
foo=cbind.data.frame(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo=cbind.data.frame((TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo=cbind.data.frame((TMP$files), (unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
foo=data.frame((TMP$files), (unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
View(dat1)
fix(TMP)
View(dat1)
ls()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/generateHomeworks.r')
my.error<<-"No errors were found"
getwd(setwd)
setwd(shiny)
setwd("shiny")
library(genertest)
runApp()
library(shiny)
library(shinyIncubator)
runApp()
library(knitr)
install.packages(knitr)
install.packages("knitr")
library(knitr)
TMP
dat()=TMP
as.data.frame(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
data.frame(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
data.frame.cbind(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
cbind.data.frame(as.matrix(TMP$files), as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))))
as.matrix(TMP$files)
as.matrix(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", "))))
length(TMP$Files)
length(TMP$files)
length(TMP$files)/length(TMP$Questions)
cbind.data.frame(as.matrix(TMP$files), as.matrix(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions))
)
cbind.data.frame(as.matrix(TMP$files), as.matrix(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions))
)
cbind.data.frame(as.matrix(TMP$files), as.matrix(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions)), check.nameas=FALSE)
cbind.data.frame(as.matrix(TMP$files), as.matrix(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions)))
runApp()
runApp()
Merge.pdf
? Merge.pdf
Merge.pdf(TMP)
TMP
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/genertest.R')
#generate the tests using the genertest function
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
results.genertest<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
##results.genetest: summary of the tasks performed by the genertest function
# for example the result in this case would be my.files<-c("Exam1.pdf", "Exam2.pdf", "Exam1sol.pdf","Exam2sol.pdf")
TMP
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/genertest.R')
genertest
? genertest
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, merge.pdf=TRUE, my.final.sentence="Good luck!")
TMP
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, merge.pdf=FALSE)
TMP
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
TMP<-genertest(my.file.name, my.outdir=NULL, num.tests=2, repeat.each.test=1,
my.seed=2, topics=c("Descr", "Probability"), topics.points=c(20,30),
min.distance=0, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=FALSE, merge.pdf=TRUE)
TMP
#data(my.data)
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
gPS.output<-genertestPreSelect(my.file.name, my.outdir=NULL, list.QID=list(c(1,2,3), c(2,3,4)), num.tests=2, repeat.each.test=3,
my.seed=2, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
gPS.output
source('C:/Users/lara/Dropbox/genertest/Rlibrary/genertest/R/genertestPreSelect.R')
#data(my.data)
my.title<-"Medical Faculty - Undergraduates  - Exam of Biostatistics"
my.date<-"31.7.2013"
#my.outdir<-"C:\Users\lara\Documents\proveGenertest"
#Sweave.sty and pdflatex.exe must be available from this directory
#name and path of the database with the questions
my.file.name=paste(path.package("genertest"),"/extdata/questionsExamples.txt",sep="")
gPS.output<-genertestPreSelect(my.file.name, my.outdir=NULL, list.QID=list(c(1,2,3), c(2,3,4)), num.tests=2, repeat.each.test=3,
my.seed=2, generate.solutions=TRUE,
my.title=my.title, my.date=my.date, my.prefix="Exam", head.name="Name", head.id="ID Number",
head.points="Points", head.prefix="Exam", my.language="english",
use.Sweave=TRUE, compile.pdf=TRUE, my.final.sentence="Good luck!")
gPS.output
gPS.output
library(genertest)
library(genertest)
runApp()
runApp()
runApp()
runApp()
runApp()
cbind.data.frame(as.matrix(c(TMP$files, TMP$merged.file)), as.matrix(c(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions), "Merged file")))
as.matrix(c(TMP$files, TMP$merged.file))
as.matrix(c(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions), "Merged file")))
as.matrix(c(rep(unlist(lapply(TMP$Questions, function(x) paste(x, collapse=", ")))), length(TMP$files)/length(TMP$Questions), "Merged file"))
runApp()
TMP$files
TMP$names.files
runApp()
getwd()
runApp(genertest)
setwd(genertest)
setwd("genertest")
ls()
getwd()
runApp(genertestApp)
runApp("genertestApp")
? get
getwd()
setwd("genertestPS")
setwd("genertestPSApp")
ls()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame
? data.frame
runApp()
runApp()
runApp()
matrix()
? matrix
paste("Test", 1:1)
paste("Test", 1:10)
runApp()
runApp()
y.df=data.frame(matrix(NA, ncol=4, nrow=10))#, row.names=paste("Question ID", 1:10), col.names=paste("Test", 1:4))
y.df
names(y.df)
dimnames(y.df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
matrix(NA, nrow=10, ncol=10)
matrix(NA, nrow=10, ncol=10)[-1,-1]
all(is.na(matrix(NA, nrow=10, ncol=10)[-1,-1]))
my.df
my.mat
my.mat=matrix(NA, nrow=11, ncol=4)
my.mat[,1]
my.mat[2:4,1]=c(1,2,3)
my.mat[2:4,2]=c(2,3,4)
my.mat[2:3, 3]=c(4,5)
my.mat
my.mat=cbind(NA, my.mat)
my.mat
apply(my.mat[-1,-1], 2, function(x) x[!is.na(x) & x!=0])
tmp=apply(my.mat[-1,-1], 2, function(x) x[!is.na(x) & x!=0])
lapply(tmp, function(x) ifelse(length(x)>0, x, NULL))
lapply(tmp, function(x) ifelse(length(x)>0, x, NULL))
tmp[lapply(tmp, length)]
tmp[lapply(tmp, function(x) length(x)>0)]
tmp[unlist(lapply(tmp, function(x) length(x)>0)])
tmp[unlist(lapply(tmp, function(x) length(x)>0))]
runApp()
library(genertest)
library(genertest)
runApp()
runApp()
runApp()
rm(list=ls())
library(genertest)
genertestPreSelect
setwd("shiny/genertestPSApp")
runApp()
library(genertest)
library(shiny)
library(shinyIncubator)
runApp()
runApp()
runApp()
runApp()
runApp()
? data.frame
runApp()
runApp()
? generateHomeworks
? generateHomeworks
paste("AllSortedWeek", "AllNotSorted", collapse=", ")
getwd()
setwd(../)
setwd("../generateHomeworks")
setwd("..\generateHomeworks")
setwd("../generateHomeworks")
setwd("../generateHomeworksApp")
ls()
runApp()
runApp()
runApp()
runApp()
runApp()
? fileInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file.copy
? files.to.move
? file.copy
library(genertest)
> fileInput
?  fileInput
library(genertest)
runApp()
input$files.to.move$name
input$files.to.move$datapath
basefile(input$files.to.move$datapath)
? basefile
? filebase
? filebase
basename
? basename
library(genertest)
runApp()
setwd("Homeworksjul3113171217"")
setwd("Homeworksjul3113171217")
file.rename("0", "tutupdf.pdf")
fileInput
? fileInput
library(genertest)
library(genertest)
runApp()
setwd(..)
setwd("..")
runApp()
? install_github
library(devtools)
? install_github
install_github("Pyramid", subdir = "Pyramid", username = "timriffe")
